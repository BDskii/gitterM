////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРОКАМИ

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Строка          - Строка - строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - строка, содержащая символы-разделители.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - отдельные слова.
//
// Пример:
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один", "два2_", "три";
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
		                    НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
	                         НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 10.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
                                   Знач Параметр1,
                                   Знач Параметр2 = Неопределено,
                                   Знач Параметр3 = Неопределено,
                                   Знач Параметр4 = Неопределено,
                                   Знач Параметр5 = Неопределено,
                                   Знач Параметр6 = Неопределено,
                                   Знач Параметр7 = Неопределено,
                                   Знач Параметр8 = Неопределено,
                                   Знач Параметр9 = Неопределено,
                                   Знач Параметр10 = Неопределено) Экспорт
	
	СтрокаРезультата = СтрокаПодстановки;
	СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%1", Параметр1);
	
	Если Параметр2 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%2", Параметр2);
	КонецЕсли;
	
	Если Параметр3 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%3", Параметр3);
	КонецЕсли;
	
	Если Параметр4 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%4", Параметр4);
	КонецЕсли;
	
	Если Параметр5 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%5", Параметр5);
	КонецЕсли;
	
	Если Параметр6 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%6", Параметр6);
	КонецЕсли;
	
	Если Параметр7 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%7", Параметр7);
	КонецЕсли;
	
	Если Параметр8 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%8", Параметр8);
	КонецЕсли;
	
	Если Параметр9 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%9", Параметр9);
	КонецЕсли;
	
	Если Параметр10 <> Неопределено Тогда
		СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%10", Параметр10);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Подставляет параметры в строку. Неограниченное число параметров в строке.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%1").
//  МассивПараметров   - Массив - массив строк, которые соответствуют параметрам в строке подстановки
//
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// МассивПараметров = Новый Массив;
// МассивПараметров = МассивПараметров.Добавить("Вася");
// МассивПараметров = МассивПараметров.Добавить("Зоопарк");
//
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), МассивПараметров);
//
Функция ПодставитьПараметрыВСтрокуИзМассива(Знач СтрокаПодстановки, знач МассивПараметров) Экспорт
	
	СтрокаРезультата = СтрокаПодстановки;
	
	Для Индекс = 1 По МассивПараметров.Количество() Цикл
		Если Не ПустаяСтрока(МассивПараметров[Индекс-1]) Тогда
			СтрокаРезультата = СтрЗаменить(СтрокаРезультата, "%"+Строка(Индекс), МассивПараметров[Индекс-1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Заменяет в шаблоне строки имена параметров на их значения. Параметры в строке выделяются с двух сторон квадратными скобками.
//
// Параметры:
//
//  ШаблонСтроки        - Строка    - строка, в которую необходимо вставить значения.
//  ВставляемыеЗначения - Структура - структура значений, где ключ - имя параметра без спецсимволов,
//                                    значение - вставляемое значение.
//
// Возвращаемое значение:
//  Строка - строка со вставленными значениями.
//
// Пример использования:
//  ВставитьПараметрыВСтроку("Здравствуй, [Имя] [Фамилия].", Новый Структура("Фамилия,Имя", "Пупкин", "Вася"));
//  Возвращает: "Здравствуй, Вася Пупкин".
Функция ВставитьПараметрыВСтроку(Знач ШаблонСтроки, ВставляемыеЗначения) Экспорт
	Результат = ШаблонСтроки;
	Для Каждого Параметр Из ВставляемыеЗначения Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Параметр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Получает значения параметров из строки.
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра — имя параметра; 
//                                Значение — его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//
// Возвращаемое значение:
//  Структура - структура параметров, где ключ - имя параметра, значение - значение параметра.
//
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров) Экспорт
	
	Результат = Новый Структура;
	
	СимволДвойныеКавычки = Символ(34); // (")
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, ";");
	
	Для Каждого СтрокаПараметра Из МассивПодстрок Цикл
		
		ПозицияПервогоЗнакаРавенства = Найти(СтрокаПараметра, "=");
		
		// Получаем имя параметра
		ИмяПараметра = СокрЛП(Лев(СтрокаПараметра, ПозицияПервогоЗнакаРавенства - 1));
		
		// Получаем значение параметра
		ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, ПозицияПервогоЗнакаРавенства + 1));
		
		Если  Лев(ЗначениеПараметра, 1) = СимволДвойныеКавычки
			И Прав(ЗначениеПараметра, 1) = СимволДвойныеКавычки Тогда
			
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяПараметра) Тогда
			
			Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверяет содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - строка для проверки.
//  УчитыватьЛидирующиеНули - Булево - нужно ли учитывать лидирующие нули.
//  УчитыватьПробелы - Булево - нужно ли учитывать пробелы.
//
// Возвращаемое значение:
//  Истина       - строка содержит только цифры;
//  Ложь         - строка содержит не только цифры.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ТолькоЦифрыВСтроке()

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей.
//
// Возвращаемое значение:
//  Булево - истина, если символ является разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	//Богданский 31.05.2016 //ну тоже по большому счету из новой БСП  
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	//Богданский 31.05.2016 
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, содержит ли строка только символы кириллического алфавита.
//
// Параметры:
//  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
//  ДопустимыеСимволы - строка для проверки.
//
// Возвращаемое значение:
//  Истина       - строка содержит только кириллические (или допустимые) символы или пустая;
//  Ложь         - строка содержит не только кириллические (или допустимые) символы.
//
Функция ТолькоКириллицаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "") Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодыДопустимыхСимволов = Новый Массив;
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	КодыДопустимыхСимволов.Добавить(1025); // "Ё"
	
	Для а = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, а, 1)));
	КонецЦикла;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если ((КодСимвола < 1040) Или (КодСимвола > 1103)) 
			И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) 
			И Не (Не УчитыватьРазделителиСлов И ЭтоРазделительСлов(КодСимвола)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, содержит ли строка только символы латинского алфавита.
//
// Параметры:
//  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
//  ДопустимыеСимволы - строка для проверки.
//
// Возвращаемое значение:
//  Истина       - строка содержит только латинские (или допустимые) символы;
//  Ложь         - строка содержит не только латинские (или допустимые) символы.
//
Функция ТолькоЛатиницаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "") Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодыДопустимыхСимволов = Новый Массив;
	
	Для а = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, а, 1)));
	КонецЦикла;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если ((КодСимвола < 65) Или (КодСимвола > 90 И КодСимвола < 97) Или (КодСимвола > 122))
			И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) 
			И Не (Не УчитыватьРазделителиСлов И ЭтоРазделительСлов(КодСимвола)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Удаляет двойные кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка       - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
// 
Функция СократитьДвойныеКавычки(Знач Строка) Экспорт
	
	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;
	
КонецФункции 

// Процедура удаляет из строки указанное количество символов справа
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов) Экспорт
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры 

// Находит символ в строке с конца
//
Функция НайтиСимволСКонца(Знач СтрокаВся, Знач ОдинСимвол) Экспорт
	
	ДлинаСтроки = СтрДлина(СтрокаВся);
	
	Для ТекущаяПозиция = 1 По СтрДлина(СтрокаВся) Цикл
		РеальнаяПозиция = ДлинаСтроки - ТекущаяПозиция + 1;
		ТекущийСимвол = Сред(СтрокаВся, РеальнаяПозиция, 1);
		Если ТекущийСимвол = ОдинСимвол Тогда
			Возврат РеальнаяПозиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Функция проверяет, является ли переданная в неё строка уникальным идентификатором
//
Функция ЭтоУникальныйИдентификатор(ИдентификаторСтрока) Экспорт
	
	УИСтрока = ИдентификаторСтрока;
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(УИСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Сч = 1 По СтрДлина(УИСтрока) Цикл
		Если КодСимвола(Шаблон, сч) = 88 И 
			((КодСимвола(УИСтрока, сч) < 48 ИЛИ КодСимвола(УИСтрока, сч) > 57) И (КодСимвола(УИСтрока, сч) < 97 или КодСимвола(УИСтрока, сч) > 102)) Тогда
			Возврат ложь; 
		 ИначеЕсли КодСимвола(Шаблон, сч) = 45 И КодСимвола(УИСтрока, сч) <> 45 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Формирует строку повторяющихся символов заданной длины.
//
// Параметры:
//  Символ      - Строка - символ, из которого будет формироваться строка.
//  ДлинаСтроки - Число  - требуемая длина результирующей строки.
//
// Возвращаемое значение:
//  Строка - строка, состоящая из повторяющихся символов.
//
Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
	
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Дополняет строку символами слева или справа до заданной длины и возвращает ее.
// Незначащие символы слева и справа удаляются. По умолчанию функция дополняет строку символами "0" (ноль) слева.
//
// Параметры:
//  Строка      - Строка - исходная строка, которую необходимо дополнить символами;
//  ДлинаСтроки - Число  - требуемая результирующая длина строки;
//  Символ      - Строка - символ, которым необходимо дополнить строку;
//  Режим       - Строка - "Слева" или "Справа" - режим добавления символов к исходной строке.
// 
// Возвращаемое значение:
//  Строка - строка, дополненная символами.
//
// Пример 1:
// Строка = "1234"; ДлинаСтроки = 10; Символ = "0"; Режим = "Слева"
// Возврат: "0000001234"
//
// Пример 2:
// Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
// Возврат: "1234######"
//
Функция ДополнитьСтроку(Знач Строка, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева") Экспорт
	
	// длина символа не должна превышать единицы
	Символ = Лев(Символ, 1);
	
	// удаляем крайние пробелы слева и справа строки
	Строка = СокрЛП(Строка);
	
	КоличествоСимволовНадоДобавить = ДлинаСтроки - СтрДлина(Строка);
	
	Если КоличествоСимволовНадоДобавить > 0 Тогда
		
		СтрокаДляДобавления = СформироватьСтрокуСимволов(Символ, КоличествоСимволовНадоДобавить);
		
		Если ВРег(Режим) = "СЛЕВА" Тогда
			
			Строка = СтрокаДляДобавления + Строка;
			
		ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
			
			Строка = Строка + СтрокаДляДобавления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Удаляет крайние повторяющиеся символы слева или справа в строке.
//
// Параметры:
//  Строка      - Строка - исходная строка, из которой необходимо удалить крайние повторяющиеся символы;
//  Символ      - Строка - искомый символ для удаления;
//  Режим       - Строка - "Слева" или "Справа" - режим удаления символов в исходной строке.
//
// Возвращаемое значение:
//  Строка - обрезанная строка.
//
Функция УдалитьПовторяющиесяСимволы(Знач Строка, Знач Символ, Знач Режим = "Слева") Экспорт
	
	Если ВРег(Режим) = "СЛЕВА" Тогда
		
		Пока Лев(Строка, 1)= Символ Цикл
			
			Строка = Сред(Строка, 2);
			
		КонецЦикла;
		
	ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
		
		Пока Прав(Строка, 1)= Символ Цикл
			
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

// Выполняет замену символов в строке.
//
// Параметры:
//  ЗаменяемыеСимволы - Строка - строка символов, каждый из которых требует замены;
//  Строка            - Строка - исходная строка, в которой требуется замена символов;
//  СимволыЗамены     - Строка - строка символов, на каждый из которых нужно заменить символы параметра ЗаменяемыеСимволы.
// 
//  Возвращаемое значение:
//   Строка - строка после замены символов.
//
//  Примечание: функция предназначена для простых случаев, например, для замены латиницы на похожие кириллические символы.
//              Функция не анализирует повторную замену символов, поэтому такой вызов:
//               ЗаменитьОдниСимволыДругими("кр", "карета", "гз") вернет слово "газета", а
//               ЗаменитьОдниСимволыДругими("кр", "карета", "рк") не вернет слово "ракета".
//
Функция ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Строка, СимволыЗамены) Экспорт
	
	Результат = Строка;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет преобразование арабского числа в римское.
//
// Параметры:
//	АрабскоеЧисло		  - число, целое, от 0 до 999;
//	ИспользоватьКириллицу - булево, использовать в качестве арабских цифр кириллицу или латиницу.
//
// Возвращаемое значение:
//	Строка - число в римской нотации.
//
// Пример:
//	ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII".
//
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспользоватьКириллицу = Истина) Экспорт
	
	РимскоеЧисло	= "";
	АрабскоеЧисло	= ДополнитьСтроку(АрабскоеЧисло, 3);
	
	Если ИспользоватьКириллицу Тогда
		c1 = "1"; c5 = "У"; c10 = "Х"; c50 = "Л"; c100 ="С"; c500 = "Д"; c1000 = "М";
		
	Иначе
		c1 = "I"; c5 = "V"; c10 = "X"; c50 = "L"; c100 ="C"; c500 = "D"; c1000 = "M";
		
	КонецЕсли;
	
	Единицы	= Число(Сред(АрабскоеЧисло, 3, 1));
	Десятки	= Число(Сред(АрабскоеЧисло, 2, 1));
	Сотни	= Число(Сред(АрабскоеЧисло, 1, 1));
	
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Сотни,   c100, c500, c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Десятки, c10,  c50,  c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(Единицы, c1,   c5,   c10);
	
	Возврат РимскоеЧисло;
	
КонецФункции 

// Выполняет преобразование цифры в римскую нотацию. 
//
// Параметры
//	Цифра - Число - цифра от 0 до 9.
//  РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка - Строка - символы, соответствующие римским цифрам.
//
// Возвращаемое значение
//	Строка - цифра в римской нотации.
//
// Пример: 
//	ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII".
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра, РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка)
	
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
		РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
		РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
	
КонецФункции


// Выполняет преобразование римского числа в арабское
//
// Параметры:
//	РимскоеЧисло		  - Строка - число, записанное римскими цифрами;
//	ИспользоватьКириллицу - Булево - использовать в качестве арабских цифр кириллицу или латиницу.
//
// Возвращаемое значение:
//	Число.
//
// Пример:
//	ПреобразоватьЧислоВАрабскуюНотацию("ХVII") = 17.
//
Функция ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло, ИспользоватьКириллицу = Истина) Экспорт
	
	АрабскоеЧисло=0;
	
	Если ИспользоватьКириллицу Тогда
		c1 = "1"; c5 = "У"; c10 = "Х"; c50 = "Л"; c100 ="С"; c500 = "Д"; c1000 = "М";
		
	Иначе
		c1 = "I"; c5 = "V"; c10 = "X"; c50 = "L"; c100 ="C"; c500 = "D"; c1000 = "M";
		
	КонецЕсли;
	
	РимскоеЧисло = СокрЛП(РимскоеЧисло);
	ЧислоСимволов = СтрДлина(РимскоеЧисло);
	
	Для Сч=1 По ЧислоСимволов Цикл
		Если Сред(РимскоеЧисло,Сч,1) = c1000 Тогда
			АрабскоеЧисло = АрабскоеЧисло+1000;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c500 Тогда
			АрабскоеЧисло = АрабскоеЧисло+500;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c100 Тогда
			Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c500) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c1000)) Тогда
				АрабскоеЧисло = АрабскоеЧисло-100;
			Иначе
				АрабскоеЧисло = АрабскоеЧисло+100;
			КонецЕсли;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c50 Тогда
			АрабскоеЧисло = АрабскоеЧисло+50;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c10 Тогда
			Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c50) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c100)) Тогда
				АрабскоеЧисло = АрабскоеЧисло-10;
			Иначе
				АрабскоеЧисло = АрабскоеЧисло+10;
			КонецЕсли;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c5 Тогда
			АрабскоеЧисло = АрабскоеЧисло+5;
		ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c1 Тогда
			Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c5) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c10)) Тогда
				АрабскоеЧисло = АрабскоеЧисло-1;
			Иначе
				АрабскоеЧисло = АрабскоеЧисло+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат АрабскоеЧисло;
	
КонецФункции 

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//										   для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
// 	ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = Формат(Число,"ЧН=0");
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = Результат + " " + МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = Результат + " " + МассивПредставлений[1];
	Иначе
		Результат = Результат + " " + МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;	
			
КонецФункции

// Очищает текст в формате HTML от тегов и возвращает неформатированный текст. 
//
// Параметры:
//  ИсходныйТекст - Строка - текст в формате HTML.
//
// Возвращаемое значение:
//  Строка - текст, очищенный от тегов, скриптов и заголовков.
//
Функция ИзвлечьТекстИзHTML(Знач ИсходныйТекст) Экспорт
	Результат = "";
	
	Текст = НРег(ИсходныйТекст);
	
	// отрезаем все что не body
	Позиция = Найти(Текст, "<body");
	Если Позиция > 0 Тогда
		Текст = Сред(Текст, Позиция + 5);
		ИсходныйТекст = Сред(ИсходныйТекст, Позиция + 5);
		Позиция = Найти(Текст, ">");
		Если Позиция > 0 Тогда
			Текст = Сред(Текст, Позиция + 1);
			ИсходныйТекст = Сред(ИсходныйТекст, Позиция + 1);
		КонецЕсли;
	КонецЕсли;
	
	Позиция = Найти(Текст, "</body>");
	Если Позиция > 0 Тогда
		Текст = Лев(Текст, Позиция - 1);
		ИсходныйТекст = Лев(ИсходныйТекст, Позиция - 1);
	КонецЕсли;
	
	// вырезаем скрипты
	Позиция = Найти(Текст, "<script");
	Пока Позиция > 0 Цикл
		ПозицияЗакрывающегоТега = Найти(Текст, "</script>");
		Если ПозицияЗакрывающегоТега = 0 Тогда
			// не найден закрывающий тег - вырезаем оставшийся текст.
			ПозицияЗакрывающегоТега = СтрДлина(Текст);
		КонецЕсли;
		Текст = Лев(Текст, Позиция - 1) + Сред(Текст, ПозицияЗакрывающегоТега + 9);
		ИсходныйТекст = Лев(ИсходныйТекст, Позиция - 1) + Сред(ИсходныйТекст, ПозицияЗакрывающегоТега + 9);
		Позиция = Найти(Текст, "<script");
	КонецЦикла;
	
	// вырезаем стили
	Позиция = Найти(Текст, "<style");
	Пока Позиция > 0 Цикл
		ПозицияЗакрывающегоТега = Найти(Текст, "</style>");
		Если ПозицияЗакрывающегоТега = 0 Тогда
			// не найден закрывающий тег - вырезаем оставшийся текст.
			ПозицияЗакрывающегоТега = СтрДлина(Текст);
		КонецЕсли;
		Текст = Лев(Текст, Позиция - 1) + Сред(Текст, ПозицияЗакрывающегоТега + 8);
		ИсходныйТекст = Лев(ИсходныйТекст, Позиция - 1) + Сред(ИсходныйТекст, ПозицияЗакрывающегоТега + 8);
		Позиция = Найти(Текст, "<style");
	КонецЦикла;
	
	// вырезаем все теги	
	Позиция = Найти(Текст, "<");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(ИсходныйТекст, Позиция-1);
		Текст = Сред(Текст, Позиция + 1);
		ИсходныйТекст = Сред(ИсходныйТекст, Позиция + 1);
		Позиция = Найти(Текст, ">");
		Если Позиция > 0 Тогда
			Текст = Сред(Текст, Позиция + 1);
			ИсходныйТекст = Сред(ИсходныйТекст, Позиция + 1);
		КонецЕсли;
		Позиция = Найти(Текст, "<");
	КонецЦикла;
	Результат = Результат + ИсходныйТекст;
	
	Возврат СокрЛП(Результат);
КонецФункции


Функция Транслит(Знач Текст = "") Экспорт
    
    Текст = СтрЗаменить(Текст, "а","a");
    Текст = СтрЗаменить(Текст, "б","b");
    Текст = СтрЗаменить(Текст, "в","v");
    Текст = СтрЗаменить(Текст, "г","g");
    Текст = СтрЗаменить(Текст, "д","d");
    Текст = СтрЗаменить(Текст, "е","e");
    Текст = СтрЗаменить(Текст, "ё","e");
    Текст = СтрЗаменить(Текст, "ж","zh");
    Текст = СтрЗаменить(Текст, "з","z");
    Текст = СтрЗаменить(Текст, "и","i");
    Текст = СтрЗаменить(Текст, "к","k");
    Текст = СтрЗаменить(Текст, "л","l");
    Текст = СтрЗаменить(Текст, "м","m");
    Текст = СтрЗаменить(Текст, "н","n");
    Текст = СтрЗаменить(Текст, "о","o");
    Текст = СтрЗаменить(Текст, "п","p");
    Текст = СтрЗаменить(Текст, "р","r");
    Текст = СтрЗаменить(Текст, "с","s");
    Текст = СтрЗаменить(Текст, "т","t");
    Текст = СтрЗаменить(Текст, "у","u");
    Текст = СтрЗаменить(Текст, "ф","f");
    Текст = СтрЗаменить(Текст, "х","h");
    Текст = СтрЗаменить(Текст, "ч","ch");
    Текст = СтрЗаменить(Текст, "ш","sh");
    Текст = СтрЗаменить(Текст, "щ","sch");
    Текст = СтрЗаменить(Текст, "ъ","");
    Текст = СтрЗаменить(Текст, "ь","'");
    Текст = СтрЗаменить(Текст, "э","e");
    Текст = СтрЗаменить(Текст, "ю","yu");
    Текст = СтрЗаменить(Текст, "й","i");
    Текст = СтрЗаменить(Текст, "ц","c");
    Текст = СтрЗаменить(Текст, "я","ya");
    Текст = СтрЗаменить(Текст, "ы","i");
    Текст = СтрЗаменить(Текст, "А","A");
    Текст = СтрЗаменить(Текст, "Б","B");
    Текст = СтрЗаменить(Текст, "В","V");
    Текст = СтрЗаменить(Текст, "Г","G");
    Текст = СтрЗаменить(Текст, "Д","D");
    Текст = СтрЗаменить(Текст, "Е","E");
    Текст = СтрЗаменить(Текст, "Ё","E");
    Текст = СтрЗаменить(Текст, "Ж","Zh");
    Текст = СтрЗаменить(Текст, "З","Z");
    Текст = СтрЗаменить(Текст, "И","I");
    Текст = СтрЗаменить(Текст, "К","K");
    Текст = СтрЗаменить(Текст, "Л","L");
    Текст = СтрЗаменить(Текст, "М","M");
    Текст = СтрЗаменить(Текст, "Н","N");
    Текст = СтрЗаменить(Текст, "О","O");
    Текст = СтрЗаменить(Текст, "П","P");
    Текст = СтрЗаменить(Текст, "Р","R");
    Текст = СтрЗаменить(Текст, "С","S");
    Текст = СтрЗаменить(Текст, "Т","T");
    Текст = СтрЗаменить(Текст, "У","U");
    Текст = СтрЗаменить(Текст, "Ф","F");
    Текст = СтрЗаменить(Текст, "Х","H");
    Текст = СтрЗаменить(Текст, "Ч","Ch");
    Текст = СтрЗаменить(Текст, "Ш","Sh");
    Текст = СтрЗаменить(Текст, "Щ","Sch");
    Текст = СтрЗаменить(Текст, "Ъ","");
    Текст = СтрЗаменить(Текст, "Ь","");
    Текст = СтрЗаменить(Текст, "Ы","I");
    Текст = СтрЗаменить(Текст, "Ц","C");
    Текст = СтрЗаменить(Текст, "Э","E");
    Текст = СтрЗаменить(Текст, "Ю","Yu");
    Текст = СтрЗаменить(Текст, "Я","Ya");
    Текст = СтрЗаменить(Текст, "Й","I"); 
    
    Возврат Текст;
	
КонецФункции

Функция ТранслитОбратный(Знач Текст = "") Экспорт
	
	Текст = НРег(Текст);
	
	Текст = СтрЗаменить(Текст, "'", "ь");
	Текст = СтрЗаменить(Текст, "sch", "щ");
	Текст = СтрЗаменить(Текст, "zh", "ж");
	Текст = СтрЗаменить(Текст, "ch", "ч");
    Текст = СтрЗаменить(Текст, "sh", "ш");
	Текст = СтрЗаменить(Текст, "ya", "я");
	Текст = СтрЗаменить(Текст, "yu", "ю");
	
    Текст = СтрЗаменить(Текст, "a", "а");
    Текст = СтрЗаменить(Текст, "b", "б");
	Текст = СтрЗаменить(Текст, "c", "ц");
	Текст = СтрЗаменить(Текст, "d", "д");
	Текст = СтрЗаменить(Текст, "e", "е");
	Текст = СтрЗаменить(Текст, "f", "ф");	
    Текст = СтрЗаменить(Текст, "g", "г");
    Текст = СтрЗаменить(Текст, "h", "х");
    Текст = СтрЗаменить(Текст, "i", "и");
	Текст = СтрЗаменить(Текст, "j", "ж");
    Текст = СтрЗаменить(Текст, "k", "к");
    Текст = СтрЗаменить(Текст, "l", "л");
    Текст = СтрЗаменить(Текст, "m", "м");
    Текст = СтрЗаменить(Текст, "n", "н");
    Текст = СтрЗаменить(Текст, "o", "о");
    Текст = СтрЗаменить(Текст, "p", "п");
	Текст = СтрЗаменить(Текст, "q", "к");
    Текст = СтрЗаменить(Текст, "r", "р");
    Текст = СтрЗаменить(Текст, "s", "с");
    Текст = СтрЗаменить(Текст, "t", "т");
    Текст = СтрЗаменить(Текст, "u", "у");
    Текст = СтрЗаменить(Текст, "v", "в");
	Текст = СтрЗаменить(Текст, "w", "в");
	Текст = СтрЗаменить(Текст, "x", "кс");
	Текст = СтрЗаменить(Текст, "y", "й");
    Текст = СтрЗаменить(Текст, "z", "з");
    
    Возврат Текст;
	
КонецФункции

// Функция - Получить массив символов
//
// Параметры:
//  Тип		 - строка - ИзПараметра, КирилицаЗаглавная, КирилицаСтрочная, ЛатиницаЗаглавная, ЛатиницаСтрочная, Цифры, ПрочиеСимволыДоступныеВПеременных 
//  Смволы	 - Строка - сиволы для ИзПараметра
// 
// Возвращаемое значение:
//  массив - 
//
Функция ПолучитьМассивСимволов(Тип = "ИзПараметра", Смволы = "") Экспорт 
	
	Результат = Новый Массив;
	
	Если Тип = "ИзПараметра" Тогда 
		Для а = 1 По СтрДлина(Смволы) Цикл
			Результат.Добавить(Сред(Смволы, а, 1));
		КонецЦикла;
		
	ИначеЕсли Тип = "КирилицаСтрочная" Тогда 
		
		Для н = 1072 по 1103 Цикл 
			Результат.Добавить(Символ(н));
		КонецЦикла;	
		Результат.Добавить("ё");
		
	ИначеЕсли Тип = "КирилицаЗаглавная" Тогда 
		
		Для н = 1040 по 1071 Цикл 
			Результат.Добавить(Символ(н));
		КонецЦикла;
		Результат.Добавить("Ё");
		
	ИначеЕсли Тип = "ЛатиницаСтрочная" Тогда 
		Для н = 97 по 122 Цикл 
			Результат.Добавить(Символ(н));
		КонецЦикла;	
		
	ИначеЕсли Тип = "ЛатиницаЗаглавная" Тогда 
		Для н = 65 по 90 Цикл 
			Результат.Добавить(Символ(н));
		КонецЦикла;
		
	//Богданский 21.11.2016 Наряд 0000020716 от 21.11.2016  	
	ИначеЕсли Тип = "СлужебныеСимволы" Тогда 
		СтрокаСимволов = "`~!@#$%^&*()}{][/?.,<>\|/+-_=:;'""";
		Для а = 1 По СтрДлина(СтрокаСимволов) Цикл
			Результат.Добавить(Сред(СтрокаСимволов, а, 1));
		КонецЦикла;
	//Богданский 21.11.2016 Наряд 0000020716 от 21.11.2016  	
		
	ИначеЕсли Тип = "Цифры" Тогда
		Для н = 48 по 57 Цикл 
			Результат.Добавить(Символ(н));
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьМассивыСимволов(Типы, Смволы = "") Экспорт 
	
	Результат = Новый Массив;
	
	Для Каждого Тип из СтрРазделить(Типы,",") Цикл 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		ПолучитьМассивСимволов(Тип, Смволы));
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

// Функция - Это допустимый символ
//
// Параметры:
//  Символ			 - строка - проверяемый символ 
//  МассивСимволов	 - массив - Массив сиволов 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция СимволВходитВМассив(Символ, МассивСимволов) Экспорт
	
	Возврат МассивСимволов.Найти(Символ) <> Неопределено;	
	
КонецФункции	

// Функция - Строка состоит из сиволов
//
// Параметры:
//  Строка			 - строка - проверяемая строка
//  МассивСимволов	 - массив - Массив сиволов 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция СтрокаСостоитИзСимволов(Строка, МассивСимволов) Экспорт 
	
	Для Н = 1 По СтрДлина(Строка) Цикл
		Если СимволВходитВМассив(Сред(Строка, Н, 1), МассивСимволов) Тогда 
			Продолжить;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЦикла;
	
	Возврат Истина;
	
	
КонецФункции

функция ОставитьВСтрокеСимволыИзМассива(Строка, МассивСимволов) Экспорт 
	
	Результат = "";
	
	Для Н = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Н, 1);
		Если не СимволВходитВМассив(Символ, МассивСимволов) Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КонвертацияРаскладкиНаКириллицу(Знач Текст = "") Экспорт
	
	Текст = НРег(Текст);
	
    Текст = СтрЗаменить(Текст, "q", "й");
    Текст = СтрЗаменить(Текст, "w", "ц");
	Текст = СтрЗаменить(Текст, "e", "у");
	Текст = СтрЗаменить(Текст, "r", "к");
	Текст = СтрЗаменить(Текст, "t", "е");
	Текст = СтрЗаменить(Текст, "y", "н");	
    Текст = СтрЗаменить(Текст, "u", "г");
    Текст = СтрЗаменить(Текст, "i", "ш");
	Текст = СтрЗаменить(Текст, "o", "щ");
    Текст = СтрЗаменить(Текст, "p", "з");
    Текст = СтрЗаменить(Текст, "[", "х");
    Текст = СтрЗаменить(Текст, "]", "ъ");
    Текст = СтрЗаменить(Текст, "a", "ф");
    Текст = СтрЗаменить(Текст, "s", "ы");
    Текст = СтрЗаменить(Текст, "d", "в");
	Текст = СтрЗаменить(Текст, "f", "а");
    Текст = СтрЗаменить(Текст, "g", "п");
    Текст = СтрЗаменить(Текст, "h", "р");
    Текст = СтрЗаменить(Текст, "j", "о");
    Текст = СтрЗаменить(Текст, "k", "л");
    Текст = СтрЗаменить(Текст, "l", "д");
	Текст = СтрЗаменить(Текст, ";", "ж");
	Текст = СтрЗаменить(Текст, "'", "э");
	Текст = СтрЗаменить(Текст, "z", "я");
    Текст = СтрЗаменить(Текст, "x", "ч");
    Текст = СтрЗаменить(Текст, "c", "с");
	Текст = СтрЗаменить(Текст, "v", "м");
	Текст = СтрЗаменить(Текст, "b", "и");
	Текст = СтрЗаменить(Текст, "n", "т");
	Текст = СтрЗаменить(Текст, "m", "ь");	
    Текст = СтрЗаменить(Текст, ",", "б");
    Текст = СтрЗаменить(Текст, ".", "ю");
    
    Возврат Текст;
	
КонецФункции

Функция КонвертацияРаскладкиНаЛатиницу(Знач Текст = "") Экспорт
	
	Текст = НРег(Текст);
	
    Текст = СтрЗаменить(Текст, "й", "q");
    Текст = СтрЗаменить(Текст, "ц", "w");
	Текст = СтрЗаменить(Текст, "у", "e");
	Текст = СтрЗаменить(Текст, "к", "r");
	Текст = СтрЗаменить(Текст, "е", "t");
	Текст = СтрЗаменить(Текст, "н", "y");
    Текст = СтрЗаменить(Текст, "г", "u");
    Текст = СтрЗаменить(Текст, "ш", "i");
	Текст = СтрЗаменить(Текст, "щ", "o");
    Текст = СтрЗаменить(Текст, "з", "p");
    Текст = СтрЗаменить(Текст, "х", "{");
    Текст = СтрЗаменить(Текст, "ъ", "}");
    Текст = СтрЗаменить(Текст, "ф", "a");
    Текст = СтрЗаменить(Текст, "ы", "s");
    Текст = СтрЗаменить(Текст, "в", "d");
	Текст = СтрЗаменить(Текст, "а", "f");
    Текст = СтрЗаменить(Текст, "п", "g");
    Текст = СтрЗаменить(Текст, "р", "h");
    Текст = СтрЗаменить(Текст, "о", "j");
    Текст = СтрЗаменить(Текст, "л", "k");
    Текст = СтрЗаменить(Текст, "д", "l");
	Текст = СтрЗаменить(Текст, "ж", ";");
	Текст = СтрЗаменить(Текст, "э", "'");
	Текст = СтрЗаменить(Текст, "я", "z");
    Текст = СтрЗаменить(Текст, "ч", "x");
    Текст = СтрЗаменить(Текст, "с", "c");
	Текст = СтрЗаменить(Текст, "м", "v");
	Текст = СтрЗаменить(Текст, "и", "b");
	Текст = СтрЗаменить(Текст, "т", "n");
	Текст = СтрЗаменить(Текст, "ь", "m");
    Текст = СтрЗаменить(Текст, "б", ",");
    Текст = СтрЗаменить(Текст, "ю", ".");
    
    Возврат Текст;
	
КонецФункции

Функция ГенераторПаролей(ИспользуемыеМножестваСимволов = "ЛатиницаСтрочная,ЛатиницаЗаглавная,СлужебныеСимволы,Цифры", ДлиннаПаролей = 8, КоличествоПаролей = 1) Экспорт 
		
	Результат = Новый Массив;
	
	МассивСимволов = Новый Массив;
	
	Для Каждого МножествоСимволов из СтрРазделить(ИспользуемыеМножестваСимволов,",") Цикл 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСимволов, ПолучитьМассивСимволов(МножествоСимволов));		
		
	КонецЦикла;
	КоличествоСимволовВМассиве = МассивСимволов.Количество();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	
	Для НомерПароля = 1 по КоличествоПаролей Цикл 
		
		Пароль = "";
		
		Для НомерСимвола = 1 по ДлиннаПаролей Цикл
			
			НомерСлучайногоСимвола = ГСЧ.СлучайноеЧисло(0, КоличествоСимволовВМассиве - 1); 
			СлучайныйСимвол = МассивСимволов[НомерСлучайногоСимвола];
			Пароль = Пароль + СлучайныйСимвол; 
			
		КонецЦикла;	
		
		Результат.Добавить(Пароль);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция СтрокаСоответствуетМаске(Строка, Маска) Экспорт 
	
	//да велосипед 
	//но готове только через COM или через XDTO что помоему долговато
	
	ЭлементыМаски = СтрРазделить(Маска,",");
	
	//Счетчик = -1;
	ТекущаяПозиция = 1;
	
	Для Каждого ЭлементМаски Из ЭлементыМаски Цикл
		//Счетчик = Счетчик + 1;
		
		Если Лев(ЭлементМаски,2) = "//" Тогда //экранирование
			ПроверяемыеСимволы = Сред(ЭлементМаски,3);
			КоличествоСимволов = СтрДлина(ПроверяемыеСимволы);
			ПроверяемаяСтрока = Сред(Строка, ТекущаяПозиция, КоличествоСимволов);
			
			Если ПроверяемаяСтрока <> ПроверяемыеСимволы Тогда 
				Возврат Ложь;
			КонецЕсли;
			
			
			
		ИначеЕсли Лев(ЭлементМаски,2) = "/*" Тогда //любые символы
			ПроверяемыеСимволы = Сред(ЭлементМаски,3);
			КоличествоСимволов = СтрДлина(ПроверяемыеСимволы);

			
		ИначеЕсли Лев(ЭлементМаски,2) = "/!" Тогда 
			ПроверяемыеСимволы = Сред(ЭлементМаски,3);
			КоличествоСимволов = СтрДлина(ПроверяемыеСимволы);
			ПроверяемаяСтрока = Сред(Строка, ТекущаяПозиция, КоличествоСимволов);
			
			Если ПроверяемаяСтрока = ПроверяемыеСимволы Тогда 
				Возврат Ложь;
			КонецЕсли;

		Иначе 
			КоличествоСимволов = СтрДлина(ЭлементМаски);
			ПроверяемаяСтрока = Сред(Строка, ТекущаяПозиция, КоличествоСимволов);
			
			Если ПроверяемаяСтрока <> ЭлементМаски Тогда 
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
		ТекущаяПозиция = ТекущаяПозиция + КоличествоСимволов;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

Функция СтрокаВМассивСимволов(Строка, ДобавитьНомерСимвола = Ложь) Экспорт 
	
	Результат = Новый Массив;
	             
	Счетчик = -1;
	
	Для а = 1 По СтрДлина(Строка) Цикл
		Счетчик = Счетчик + 1;
		Если ДобавитьНомерСимвола Тогда 
			Результат.Добавить(Новый Структура("Номер,Символ", Счетчик, Сред(Строка, а, 1)));
		Иначе 
			Результат.Добавить(Сред(Строка, а, 1));
		КонецЕсли;	

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьПозицииВхожденийВСтроку(Строка, ПодстрокаПоиска) Экспорт 
	
	Результат = Новый Массив;
	
	Для Н = 1 по СтрЧислоВхождений(Строка, ПодстрокаПоиска) Цикл 
		Результат.Добавить(СтрНайти(Строка,ПодстрокаПоиска,,,Н));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СтрокаСодержитСловоИзМассива(Строка, МассивСлов) Экспорт 
	
	Для Каждого Слово из МассивСлов Цикл 
		Если СтрНайти(Строка, Слово) <> 0 Тогда 
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	
