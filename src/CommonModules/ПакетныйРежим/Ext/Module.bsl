
///////////////////////////////////////////////////////////////////////////////////////////////////
//Таблица версий

Функция ПолучитьТаблицуВерсийХранилища(Хранилище, НачинаяСВерсии = Неопределено, ЗаканчиваяНаВерсии = Неопределено, ПолучатьИзменения = Ложь) Экспорт
	
	СтруктураПараметров = СоздатьСтруктуруПараметров();
	СтруктураПараметров.Хранилище = Хранилище;
	СтруктураПараметров.Хранилище = НачинаяСВерсии;
	СтруктураПараметров.Хранилище = ЗаканчиваяНаВерсии;
	СтруктураПараметров.Хранилище = ПолучатьИзменения;
	
	Если Хранилище.ИспользоватьTool1CD Тогда 
		ПолучитьТаблицуВерсийИзTool1CD(СтруктураПараметров);
		
	Иначе 
		ПолучитьТаблицуВерсийИзОтчетаКонфигуратора(СтруктураПараметров);
		
	КонецЕсли;	
	
	
	Возврат СтруктураПараметров.ТаблицаВерсий;
	
КонецФункции

Функция СоздатьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Хранилище");
	СтруктураПараметров.Вставить("НачинаяСВерсии");
	СтруктураПараметров.Вставить("ЗаканчиваяНаВерсии");
	СтруктураПараметров.Вставить("ПолучатьИзменения");
	
	СтруктураПараметров.Вставить("ТаблицаВерсий", Новый ТаблицаЗначений);
	СтруктураПараметров.ТаблицаВерсий.Колонки.Добавить("НомерВерсии", Новый ОписаниеТипов("Число"));
	СтруктураПараметров.ТаблицаВерсий.Колонки.Добавить("ИмяПользователя", Новый ОписаниеТипов("Строка"));
	СтруктураПараметров.ТаблицаВерсий.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));
	СтруктураПараметров.ТаблицаВерсий.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	СтруктураПараметров.ТаблицаВерсий.Колонки.Добавить("Изменения", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	СтруктураПараметров.Вставить("ШаблонТаблицыИзменений", Новый ТаблицаЗначений);
	СтруктураПараметров.ШаблонТаблицыИзменений.Колонки.Добавить("ТипИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзменений"));
	СтруктураПараметров.ШаблонТаблицыИзменений.Колонки.Добавить("Путь", ГлОписаниеТипаСтрока());
	
	
	СтруктураПараметров.Вставить("ДанныеОтчета", Новый Структура);
	СтруктураПараметров.ДанныеОтчета.Вставить("ТабличныйДокумент",Новый ТабличныйДокумент());
	
	
	СтруктураПараметров.Вставить("Tool1CD", Новый Структура);
	
	
	
	
	Возврат СтруктураПараметров;
	
КонецФункции	


///////////////////////////////////////////////////////////////////////////////////////////////////
//Таблица версий из Tool 1CD

Процедура ПолучитьТаблицуВерсийИзTool1CD(СтруктураПараметров)
	
	ПутьКУтилите = ПолучитьИмяВременногоФайла("exe");
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(КаталогВыгрузки);
	
	ДанныеУтилиты = ПолучитьОбщийМакет("Tool_1CD");
	ДанныеУтилиты.Записать(ПутьКУтилите);
	
	ШаблонКомманды = """%1"" ""%2\1cv8ddb.1CD"" -quit -NotExclusively  -ExportToXML ""%3"" ""USERS,VERSIONS""";
	
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомманды,
	ПутьКУтилите, СтруктураПараметров.Хранилище.ХранилищеАдрес, КаталогВыгрузки);	
	
	УдалитьФайлПоВозможности(ПутьКУтилите);
	
	
	ПутьКФайлуПользователей = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузки, "USERS.xml");
	ПутьКФайлуВерсий = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузки, "VERSIONS.xml");
	
	
	
		
	
	УдалитьФайлПоВозможности(КаталогВыгрузки);
	
КонецПроцедуры	








//Таблица версий из Tool 1CD
///////////////////////////////////////////////////////////////////////////////////////////////////
//Таблица версий из отчета конфигуратора

Процедура ПолучитьТаблицуВерсийИзОтчетаКонфигуратора(СтруктураПараметров)
	
	ПутьКОтчету = ПолучитьИмяВременногоФайла("mxl"); 
	
	ТекстКоманды = СоздатьКоманду(СтруктураПараметров.Хранилище.Приложение1С);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", СтруктураПараметров.Хранилище.ТранзитнаяБазаАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", СтруктураПараметров.Хранилище.ТранзитнаяБазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", СтруктураПараметров.Хранилище.ТранзитнаяБазаПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryF", СтруктураПараметров.Хранилище.ХранилищеАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryN", СтруктураПараметров.Хранилище.ХранилищеПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryP", СтруктураПараметров.Хранилище.ХранилищеПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryReport", ПутьКОтчету);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.НачинаяСВерсии) Тогда
		
		ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-NBegin", Формат(СтруктураПараметров.НачинаяСВерсии, "ЧН=; ЧГ=0"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ЗаканчиваяНаВерсии) Тогда
		
		ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-NEnd", Формат(СтруктураПараметров.ЗаканчиваяНаВерсии, "ЧН=; ЧГ=0"));
		
	КонецЕсли;
	
	КодВозврата = ВыполнитьКоманду1С(ТекстКоманды, СтруктураПараметров.Хранилище);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "При получении таблицы версий хранилища произошла неизвестная ошибка";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
	СтруктураПараметров.ДанныеОтчета.ТабличныйДокумент.Прочитать(ПутьКОтчету);
	ПолучитьТаблицуВерсийИзТабличногоДокумента(СтруктураПараметров);
	
	УдалитьФайлПоВозможности(ПутьКОтчету);
	
КонецПроцедуры	

Процедура ПолучитьТаблицуВерсийИзТабличногоДокумента(СтруктураПараметров)
	
	
	ТабличныйДокумент = СтруктураПараметров.ДанныеОтчета.ТабличныйДокумент;
	
	СтруктураЛокали = ПолучитьСтруктуруЛокализации(ТабличныйДокумент.Область(1,1,1,1).Текст);

	
	МассивЧисел = СтроковыеФункцииКлиентСервер.ПолучитьМассивСимволов("Цифры");
	
	НачинаяСоСтроки = 1;
	Пока ТабличныйДокумент.ВысотаТаблицы >= НачинаяСоСтроки Цикл
		
		ОбластьПоиска = ТабличныйДокумент.Область(НачинаяСоСтроки,1,ТабличныйДокумент.ВысотаТаблицы,1);
		ОбластьРезультат = ТабличныйДокумент.НайтиТекст(СтруктураЛокали.Версия,,ОбластьПоиска, Истина, Истина, Истина, Ложь);
				
		Если ОбластьРезультат = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		ТекстВерсии = 				ТабличныйДокумент.Область(ОбластьРезультат.Верх		, 2).Текст;
		ТекстИмениПользователя = 	ТабличныйДокумент.Область(ОбластьРезультат.Верх + 1	, 2).Текст;
		ТекстДатыСоздания = 		ТабличныйДокумент.Область(ОбластьРезультат.Верх + 2	, 2).Текст;
		ТекстВремениСоздания = 		ТабличныйДокумент.Область(ОбластьРезультат.Верх + 3	, 2).Текст;
		ТекстКомментария = 			ТабличныйДокумент.Область(ОбластьРезультат.Верх + 4	, 2).Текст;
		
		НоваяСтрока = СтруктураПараметров.ТаблицаВерсий.Добавить();
		НоваяСтрока.НомерВерсии = Число(СтроковыеФункцииКлиентСервер.ОставитьВСтрокеСимволыИзМассива(ТекстВерсии, МассивЧисел));
		НоваяСтрока.ИмяПользователя = ТекстИмениПользователя;
		НоваяСтрока.ДатаСоздания = РазобратьВремя(ТекстДатыСоздания, ТекстВремениСоздания);   			
		НоваяСтрока.Комментарий = ТекстКомментария;
		
		НачинаяСоСтроки = ОбластьРезультат.Верх + 5;
		
		
		
		Если СтруктураПараметров.ПолучатьИзменения = Ложь Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Изменения = СтруктураПараметров.ШаблонТаблицыИзменений.СкопироватьКолонки();
		
		ТекущийТипИзменения = Перечисления.ТипыИзменений.ПустаяСсылка();
		Пока Истина Цикл 
			НачинаяСоСтроки = НачинаяСоСтроки + 1;
			
			Если ТабличныйДокумент.ВысотаТаблицы < НачинаяСоСтроки Тогда 
				Прервать;
			КонецЕсли;	
			
			Заголовок = ТабличныйДокумент.Область(НачинаяСоСтроки, 1).Текст;
			Изменение = ТабличныйДокумент.Область(НачинаяСоСтроки, 2).Текст;
						
			Если ЗначениеЗаполнено(Заголовок) Тогда 
				Если СтрНачинаетсяС(Заголовок, СтруктураЛокали.Добавлены) Тогда 
					ТекущийТипИзменения = Перечисления.ТипыИзменений.Добавление;
					
				ИначеЕсли СтрНачинаетсяС(Заголовок, СтруктураЛокали.Изменены) Тогда
					ТекущийТипИзменения = Перечисления.ТипыИзменений.Изменение;
					
				ИначеЕсли СтрНачинаетсяС(Заголовок, СтруктураЛокали.Удалены) Тогда 
					ТекущийТипИзменения = Перечисления.ТипыИзменений.Удаление;
					
				Иначе 
					НачинаяСоСтроки = НачинаяСоСтроки - 1;//Перелет это следующая версия
					Прервать;
				КонецЕсли;	
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(ТекущийТипИзменения) Тогда 
				Продолжить;
			КонецЕсли;	
			
			
			НоваяСтрокаИзменения = НоваяСтрока.Изменения.Добавить();
			НоваяСтрокаИзменения.ТипИзменения = ТекущийТипИзменения;
			НоваяСтрокаИзменения.Путь = Изменение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСтруктуруЛокализации(ТекстЗаголовка)
	
	СтруктураЛокали = Новый Структура("Версия,Изменены,Добавлены,Удалены");
	
	Если СтрНачинаетсяС(ТекстЗаголовка, "Отчет по версиям хранилища:") Тогда 
		
		СтруктураЛокали.Вставить("Версия","Версия:");
		СтруктураЛокали.Вставить("Добавлены","Добавлены:");
		СтруктураЛокали.Вставить("Изменены","Изменены:");
		СтруктураЛокали.Вставить("Удалены","Удалены:");
		
	ИначеЕсли СтрНачинаетсяС(ТекстЗаголовка, "Repository Versions Report:") Тогда 
		
		СтруктураЛокали.Вставить("Версия","Version:");
		СтруктураЛокали.Вставить("Добавлены","Added:");
		СтруктураЛокали.Вставить("Изменены","Changed:");
		СтруктураЛокали.Вставить("Удалены","Deleted:");
		
	Иначе 
		ВызватьИсключение НСтр("ru = 'Не удалось определьить локаль файла отчета по конфигурации.'");
	КонецЕсли;	
	
	Возврат СтруктураЛокали;
	
КонецФункции	

Функция РазобратьВремя(Знач ДатаСоздания, Знач ВремяСоздания)
	
	Если СтрНайти(ВремяСоздания, "AM") <> 0 или СтрНайти(ВремяСоздания, "PM") <> 0 Тогда 
		
		СоответствиеЧасов12И24 = СоответствиеЧасов12И24();
		
		ДоПолудня = СтрНайти(ВремяСоздания, "PM") = 0;
		ВремяСоздания = СтрЗаменить(ВремяСоздания, "PM","");
		ВремяСоздания = СтрЗаменить(ВремяСоздания, "AM","");
		ВремяСоздания = СокрЛП(ВремяСоздания);
		ЧастиВремени = СтрРазделить(ВремяСоздания,":");
		
		ДатаСоздания = СтрЗаменить(ДатаСоздания,"/",".");
		ДатаСоздания = СокрЛП(ДатаСоздания);
		МассивЧастейДаты = СтрРазделить(ДатаСоздания,".");
		
		Час = СоответствиеЧасов12И24.НайтиСтроки(Новый Структура("ДоПолудня,Час12",ДоПолудня, Число( ЧастиВремени[0] ) ))[0].Час24;
				
		Возврат Дата(
		Число(МассивЧастейДаты[2]), //Год
		Число(МассивЧастейДаты[0]), //Месяц
		Число(МассивЧастейДаты[1]), //День
		Час,                        //Часы
		Число(ЧастиВремени[1]),     //Минуты
		Число(ЧастиВремени[2]));    //
		
	Иначе 	
		Возврат Дата(ДатаСоздания + " " + ВремяСоздания);   	
	КонецЕсли;	
	
КонецФункции

функция СоответствиеЧасов12И24()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ДоПолудня", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Час12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("Час24", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 12,	0);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 1,		1);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 2,		2);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 3,		3);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 4,		4);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 5,		5);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 6,		6);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 7,		7);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 8,		8);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 9,		9);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 10,	10);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Истина, 11,	11);
	
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 12,	12);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 1,	13);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 2,	14);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 3,	15);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 4,	16);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 5,	17);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 6,	18);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 7,	19);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 8,	20);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 9,	21);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 10,	22);
	ГлЗаполнитьСтрокуТаблицы(Таблица.Добавить(), Ложь, 11,	23);
	
	Возврат Таблица;
	
КонецФункции	

//Таблица версий из отчета конфигуратора
//Таблица версий
///////////////////////////////////////////////////////////////////////////////////////////////////


Процедура ЗагрузитьКонфигурациюИзХранилища(Знач Хранилище, НомерВерсии) Экспорт
	
	ТекстКоманды = СоздатьКоманду(Хранилище.Приложение1С);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", Хранилище.ТранзитнаяБазаАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", Хранилище.ТранзитнаяБазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", Хранилище.ТранзитнаяБазаПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryF", Хранилище.ХранилищеАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryN", Хранилище.ХранилищеПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryP", Хранилище.ХранилищеПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/ConfigurationRepositoryUpdateCfg");
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-v", Формат(НомерВерсии, "ЧГ="));
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-revised");
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-force");
	
	КодВозврата = ВыполнитьКоманду1С(ТекстКоманды, Хранилище);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "При обновлении основной конфигурации конфигурацией из хранилища произошла неизвестная ошибка";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВФайлы(Знач Хранилище, Каталог) Экспорт
	
	выгрузкаСОбновлением = Хранилище.ОбновлениеВыгрузки;
	
	Если выгрузкаСОбновлением Тогда
		
		Если Не ФайлСуществует(Каталог + "\ConfigDumpInfo.xml") Тогда
			
			выгрузкаСОбновлением = Ложь;
			
		Иначе
			
			имяФайлаИзменений = Справочники.Хранилища.ИмяФайлаИзменений(Хранилище);
			
			ТекстКоманды = СоздатьКоманду(Хранилище.Приложение1С);
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", Хранилище.ТранзитнаяБазаАдрес);
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", Хранилище.ТранзитнаяБазаПользователь);
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", Хранилище.ТранзитнаяБазаПароль);
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/DumpConfigToFiles", Каталог);
			
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-getChanges", имяФайлаИзменений);
			
			ВыполнитьКоманду1С(ТекстКоманды, Хранилище);
			
			выгрузкаСОбновлением = Не ПроверитьФайлИзменений_ТребуетсяПолнаяВыгрузка(Хранилище);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не выгрузкаСОбновлением Тогда
		
		Справочники.Хранилища.УдалитьВсеФайлыВКаталоге(Каталог);
		
	КонецЕсли;
	
	ТекстКоманды = СоздатьКоманду(Хранилище.Приложение1С);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", Хранилище.ТранзитнаяБазаАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", Хранилище.ТранзитнаяБазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", Хранилище.ТранзитнаяБазаПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/DumpConfigToFiles", Каталог);
	
	Если выгрузкаСОбновлением Тогда
		
		ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-update");
		ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-force");
		
	КонецЕсли;
	
	КодВозврата = ВыполнитьКоманду1С(ТекстКоманды, Хранилище);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "При выгрузке основной конфигурации в файлы произошла неизвестная ошибка";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ВыгрузитьКонфигурациюВCF(Знач Хранилище, Знач Приложение, Знач БазаАдрес, Знач БазаПользователь, Знач БазаПароль, Знач пПутьКCF) Экспорт
	
	ТекстКоманды = СоздатьКоманду(Приложение);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", БазаАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", БазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", БазаПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/DumpCfg", пПутьКCF);
	
	КодВозврата = ВыполнитьКоманду1С(ТекстКоманды, Хранилище);
	Если КодВозврата <> 0 Тогда
		ОписаниеОшибки = "При выгрузке основной конфигурации в CF произошла неизвестная ошибка";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКонфигурациюБазыДанных(Знач Хранилище, Знач Приложение, Знач БазаАдрес, Знач БазаПользователь, Знач БазаПароль) Экспорт
	
	ТекстКоманды = СоздатьКоманду(Приложение);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/F", БазаАдрес);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", БазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", БазаПароль);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/UpdateDBCfg");
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-Dynamic–");
	
	КодВозврата = ВыполнитьКоманду1С(ТекстКоманды, Хранилище);
	Если КодВозврата <> 0 Тогда
		ОписаниеОшибки = "При обновлении конфигурации базы данных произошла неизвестная ошибка";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗапуститьВРежимеПредприятияПоСтрокеСоединения(Знач Приложение, Знач пСтрокаСоединения, Знач БазаПользователь, Знач БазаПароль, Знач пОжидатьЗавершения = Ложь, Знач пПараметрЗапуска = "") Экспорт
	
	ТекстКоманды = СоздатьКоманду(Приложение, Ложь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/IBConnectionString", пСтрокаСоединения);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/N", БазаПользователь);
	ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/P", БазаПароль);
	
	Если ЗначениеЗаполнено(пПараметрЗапуска) Тогда
		ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/C" + пПараметрЗапуска);
	КонецЕсли;
	
	Если пОжидатьЗавершения Тогда
		
		КодВозврата = ВыполнитьКоманду1С(ТекстКоманды,, пОжидатьЗавершения);
		Если КодВозврата <> 0 Тогда
			ОписаниеОшибки = "При запуске в режиме предприятия произошла ошибка.";
			ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьКоманду1С(ТекстКоманды,, пОжидатьЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры


Функция СоздатьКоманду(Знач Приложение, Знач пРежимКонфигуратора = Истина)
	
	Если пРежимКонфигуратора Тогда
		ТекстКоманды = """" + Приложение + """" + " DESIGNER ";
	Иначе
		ТекстКоманды = """" + Приложение + """" + " ENTERPRISE ";
	КонецЕсли;
	Возврат ТекстКоманды;
	
КонецФункции

Функция ВыполнитьКоманду1С(ТекстКоманды, Знач Хранилище = Неопределено, Знач пОжидатьЗавершения = Истина)
	
	Если Хранилище = Неопределено Тогда
		
		КаталогКонфигурации = Неопределено;
		
	Иначе
		
		Если ЗначениеЗаполнено(Хранилище.ФайлВыводаСлужебныхСообщений) Тогда
			
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "/Out", Хранилище.ФайлВыводаСлужебныхСообщений);
			ДобавитьВКомандуКлючЗначение(ТекстКоманды, "-NoTruncate");
			
			ОбеспечитьТекстовыйФайл(Хранилище.ФайлВыводаСлужебныхСообщений);
			
			записьФайла = Новый ЗаписьТекста(Хранилище.ФайлВыводаСлужебныхСообщений, , , Истина);
			записьФайла.ЗаписатьСтроку("" + ТекущаяДата());
			записьФайла.ЗаписатьСтроку(ТекстКоманды);
			записьФайла.Закрыть();
			
		КонецЕсли;
		
		КаталогКонфигурации = Справочники.Хранилища.ПолучитьКаталогКонфигурации(Хранилище);
		
	КонецЕсли;
	
	Возврат ВыполнитьКоманду(КаталогКонфигурации, ТекстКоманды, пОжидатьЗавершения);
	
КонецФункции




Процедура ДобавитьВКомандуКлючЗначение(ТекстКоманды, Ключ, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		ТекстКоманды = ТекстКоманды + " " + Ключ;
	Иначе	
		ТекстКоманды = ТекстКоманды + " " + Ключ + " """ + Экранировать(Значение) + """";
	КонецЕсли;
	
КонецПроцедуры

Функция ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды)
	
	Возврат ОписаниеОшибки + "(" + ТекстКоманды + ")";	
	
КонецФункции



Функция ПроверитьФайлИзменений_ТребуетсяПолнаяВыгрузка(Знач Хранилище)
	
	Если Не Хранилище.ОбновлениеВыгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	имяФайлаИзменений = Справочники.Хранилища.ИмяФайлаИзменений(Хранилище);
	
	Если Не ФайлСуществует(имяФайлаИзменений) Тогда
		Возврат Истина;
	Иначе
		
		чтениеФайла = Новый ЧтениеТекста(имяФайлаИзменений);
		текстПервойСтроки = чтениеФайла.ПрочитатьСтроку();
		чтениеФайла.Закрыть();
		Если Найти(ВРег(текстПервойСтроки), ВРег("FullDump")) = 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьФайлИзменений_ЕстьИзменения(Знач Хранилище) Экспорт
	
	Если Не Хранилище.ОбновлениеВыгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	имяФайлаИзменений = Справочники.Хранилища.ИмяФайлаИзменений(Хранилище);
	
	Если Не ФайлСуществует(имяФайлаИзменений) Тогда
		Возврат Ложь;
	Иначе
		
		чтениеФайла = Новый ЧтениеТекста(имяФайлаИзменений);
		Если Не ЗначениеЗаполнено(ВРег(чтениеФайла.ПрочитатьСтроку())) Тогда
			Возврат Ложь;
		КонецЕсли;
		чтениеФайла.Закрыть();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


