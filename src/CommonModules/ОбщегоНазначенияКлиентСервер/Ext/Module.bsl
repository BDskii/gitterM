
// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - значение для помещения в массив
// 
// Возвращаемое значение:
//  Массив - массив содержащий значение
//
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(Объект, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда 
		Возврат Объект[ИмяРеквизита]; 
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	
	
КонецФункции	

Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	//ЗаполнитьЗначенияСвойств эти типы принимать не может 
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	Если ТипЗначенияОбъекта = Тип("Неопределено")
		ИЛИ ТипЗначенияОбъекта = Тип("Null")
		ИЛИ ТипЗначенияОбъекта = Тип("Число")
		ИЛИ ТипЗначенияОбъекта = Тип("Строка")
		ИЛИ ТипЗначенияОбъекта = Тип("Дата")
		ИЛИ ТипЗначенияОбъекта = Тип("Булево") Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции


Функция ОписаниеТипаСтрока(Длина = 0, Знач ДопустимаяДлина = Неопределено) Экспорт 
	Если ДопустимаяДлина = Неопределено Тогда 
		ДопустимаяДлина = ПредопределенноеЗначение("ДопустимаяДлина.Переменная");
	КонецЕсли; 
		
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Длина, ДопустимаяДлина));
	
КонецФункции	

Функция ОписаниеТипаДвоичныеДанные(Длина = 0, Знач ДопустимаяДлина = Неопределено) Экспорт 
	Если ДопустимаяДлина = Неопределено Тогда 
		ДопустимаяДлина = ПредопределенноеЗначение("ДопустимаяДлина.Переменная");
	КонецЕсли; 

	
	Возврат Новый ОписаниеТипов("ДвоичныеДанные", ,,, Новый КвалификаторыДвоичныхДанных(Длина, ДопустимаяДлина));
	
КонецФункции	

Функция ОписаниеТипаДата(ЧастиДаты = Неопределено) Экспорт 
	Если ЧастиДаты = Неопределено Тогда 
		ЧастиДаты = ПредопределенноеЗначение("ЧастиДаты.ДатаВремя");
	КонецЕсли; 
	
	Возврат Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты));
	
КонецФункции	

Функция ОписаниеТипаЧисло(ЧислоРазрядов = 10, ЧислоРазрядовДробнойЧасти = 0, Знач ДопустимыйЗнак = Неопределено) Экспорт 
	
	Если ДопустимыйЗнак = Неопределено Тогда 
		ДопустимыйЗнак = ПредопределенноеЗначение("ДопустимыйЗнак.Любой");
	КонецЕсли; 
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнак));
	
КонецФункции	

функция ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, Значение0 = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт 
	
	Колонки = СтрокаТаблицы.Владелец().Колонки; 
	
	Для Каждого Колонка из Колонки Цикл 
		ИндексКолонки = Колонки.Индекс(Колонка);
		ЗначениеПоля = Вычислить("Значение"+ИндексКолонки);
		
		СтрокаТаблицы[Колонка.Имя] = ЗначениеПоля;
		
	КонецЦикла;	
	
	Возврат СтрокаТаблицы;
	
КонецФункции


// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры:
//  ИмяКаталога  - Строка - путь к каталогу файла на диске.
//  ИмяФайла     - Строка - имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
//
Функция ПолучитьПолноеИмяФайла(Знач ИмяКаталога, Знач ИмяФайла) Экспорт

	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(СтрНайти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции

// Раскладывает полное имя файла на составляющие.
//
// Параметры:
//  ПолноеИмяФайла - Строка - полный путь к файлу.
//  ЭтоПапка - Булево - признак того, что требуется разложить полное имя папки, а не файла.
//
// Возвращаемое значение:
//   Структура - имя файла, разложенное на составные части(аналогично свойствам объекта Файл):
//		ПолноеИмя - Содержит полный путь к файлу, т.е. полностью соответствует входному параметру ПолноеИмяФайла.
//		Путь - Содержит путь к каталогу, в котором лежит файл.
//		Имя - Содержит имя файла с расширением, без пути к файлу.
//		Расширение - Содержит расширение файла.
//		ИмяБезРасширения - Содержит имя файла без расширения и без пути к файлу.
//			Пример: если ПолноеИмяФайла = "c:\temp\test.txt", то структура заполнится следующим образом:
//				ПолноеИмя: "c:\temp\test.txt".
//				Путь: "c:\temp\"
//				Имя: "test.txt"
//				Расширение: ".txt"
//				ИмяБезРасширения: "test".
//
Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	
	// Убираем из полного имени файла завершающий слеш и сохраняем получившееся полное имя в структуре.
	Если ЭтоПапка И (Прав(ПолноеИмяФайла, 1) = "/" Или Прав(ПолноеИмяФайла, 1) = "\") Тогда
		Если ЭтоПапка Тогда
			ПолноеИмяФайла = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 1);
		Иначе
			// Если путь к файлу заканчивается слешем, то у файла нет имени.
			СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Путь", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить("Имя", ""); 
			СтруктураИмениФайла.Вставить("Расширение", ""); 
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
			Возврат СтруктураИмениФайла;
		КонецЕсли;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми.
	Если СтрДлина(ПолноеИмяФайла) = 0 Тогда 
		СтруктураИмениФайла.Вставить("Путь", ""); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла.
	Если СтрНайти(ПолноеИмяФайла, "/") > 0 Тогда
		ПозицияРазделителя = СтрНайти(ПолноеИмяФайла, "/", НаправлениеПоиска.СКонца);
	ИначеЕсли СтрНайти(ПолноеИмяФайла, "\") > 0 Тогда
		ПозицияРазделителя = СтрНайти(ПолноеИмяФайла, "\", НаправлениеПоиска.СКонца);
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("Путь", Лев(ПолноеИмяФайла, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить("Имя", Сред(ПолноеИмяФайла, ПозицияРазделителя + 1));
	
	// Папки не имеют расширений, а для файла выделяем расширение.
	Если ЭтоПапка Тогда
		СтруктураИмениФайла.Вставить("Расширение", "");
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
	Иначе
		ПозицияТочки = СтрНайти(СтруктураИмениФайла.Имя, ".", НаправлениеПоиска.СКонца);
		Если ПозицияТочки = 0 Тогда
			СтруктураИмениФайла.Вставить("Расширение", "");
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
		Иначе
			СтруктураИмениФайла.Вставить("Расширение", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
			СтруктураИмениФайла.Вставить("ИмяБезРасширения", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции



// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в массив будут включены только те значения, которых в нем еще нет, причем единожды.
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Массив в обратном порядке
//
// Параметры:
//  Массив	 - Массив - массив который нужно развернуть
// 
// Возвращаемое значение:
// Массив  - новый массив где строки развернуты в обратном порядке
//
Функция МассивВОбратномПорядке(Массив) Экспорт 
	
	Результат = Новый Массив;
	
	РазмерМассива = Массив.Количество()-1;
	Для Н = 0 по РазмерМассива Цикл 
		Результат.Добавить(Массив[РазмерМассива-Н]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Найти в массиве
// ищет в содержимом массива значение имещее в одном из полей искомое значение
//
// Параметры:
//  Массив		 - Массив - массив значений где нужно что-то найти
//  ИменаПолей	 - Строка - поля содержимого массива где нужно искать  
//  Значение	 - Произвольное - значение которое нужно найти в поле
// 
// Возвращаемое значение:
//  Произвольное - значение массива где в одном из полей есть нужное значение
//
Функция НайтиВМассиве(Массив, ИменаПолей, Значение) Экспорт 
	
	МассивИменПолей = СтрРазделить(ИменаПолей,",");
	
	 	
	Для Каждого СтрокаМассива из Массив Цикл 
		Для Каждого Поле из МассивИменПолей Цикл 
			
			ЗначениеПоля = ГлПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(СтрокаМассива, Поле, "%$№#Поле отсутствует#№$%");
			
			Если Значение = ЗначениеПоля Тогда 
				Возврат СтрокаМассива;
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Неопределено
	
КонецФункции

// Функция - Найти строки в массиве
// Аналог НайтиСтроки() из ТаблицаЗначений для работы с массивом чего либо(в основном структур не возможны варианты)
//
// Параметры:
//  Массив				 - Массив - Массив значений для поиска
//  ПараметрыОтбора		 - Структура - праметры отбора где ключь имя поля а значениее это то что должно быть в этом поле для попадания в результат
//  ТребуемоеКоличество	 - Число - сколько нужно найти значений
// 
// Возвращаемое значение:
//  Массив - Результат поиска
//
Функция НайтиСтрокиВМассиве(Массив, ПараметрыОтбора, ТребуемоеКоличество = Неопределено)Экспорт 
	
	Результат = новый Массив;
	
	Для Каждого СтрокаМассива Из Массив Цикл 
		
		ВсеСовпадают = Истина;
		Для Каждого ПараметрОтбора из ПараметрыОтбора Цикл 
			Если ПараметрОтбора.Значение = ГлПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(СтрокаМассива, ПараметрОтбора.Ключ, "%$№#Поле отсутствует#№$%") Тогда 
				Продолжить;
			КонецЕсли;
			
			ВсеСовпадают = Ложь;
			Прервать;
		КонецЦикла;	
		
		Если ВсеСовпадают Тогда 
			Результат.Добавить(СтрокаМассива);
		КонецЕсли;
		
		Если ТребуемоеКоличество <> Неопределено и Результат.Количество() >= ТребуемоеКоличество Тогда 
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// Функция - Найти строки в массиве по условию
// Ищет значения в массиве по произвольному условию
//
// Параметры:
//  Массив				 - Массив - массив значений где нужно что-то найти
//  Условие				 - Строка - произвольное условие которое выполняется через Вычислить и определяет необходимость включения значения в результат
//  ТребуемоеКоличество	 - Число - сколько нужно найти значений
// 
// Возвращаемое значение:
//  Массив - Результат поиска
//
Функция НайтиСтрокиВМассивеПоУсловию(Массив, Условие, ТребуемоеКоличество = Неопределено) Экспорт 
	
	Результат = Новый Массив;
	
	Для Каждого Строка из Массив Цикл 
		
		Если Вычислить(Условие) Тогда 
			Результат.Добавить(Строка);
		КонецЕсли;	
		
		Если ТребуемоеКоличество <> Неопределено и Результат.Количество() >= ТребуемоеКоличество Тогда 
			Возврат Результат;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	
