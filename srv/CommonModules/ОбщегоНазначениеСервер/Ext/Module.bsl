
Процедура ЗаписатьИнформациюВЖурнал(ИмяСобытия ,Сообщение, Уровень) Экспорт 
	
	ЗаписьЖурналаРегистрации("ЛогОтладка", ПредопределенноеЗначение("УровеньЖурналаРегистрации."+Уровень),,,Сообщение);
	
КонецПроцедуры	


// Возвращает таблицу значений с типами объектов.
//
Функция ЗаполнитьТаблицуТиповОбъектов() Экспорт
	
	ПеречисленияТипы = Перечисления.ТипыОбъектов;
	
	ТипыОбъектов = Новый ТаблицаЗначений();
	ТипыОбъектов.Колонки.Добавить("ИмяВЕдинственномЧисле");
	ТипыОбъектов.Колонки.Добавить("ИмяВоМножественномЧисле");
	ТипыОбъектов.Колонки.Добавить("Родитель");
	ТипыОбъектов.Колонки.Добавить("ПеречислениеТип");
	ТипыОбъектов.Колонки.Добавить("ИндексКартинки");	
	
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Конфигурация",					"Конфигурации", 				"", 			ПеречисленияТипы.Конфигурация, 					0);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Общие",						"Общие", 						"Конфигурация", ПеречисленияТипы.ВеткаМетаданных, 				1);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Подсистема",					"Подсистемы", 					"Общие", 		ПеречисленияТипы.Подсистема, 					2);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщийМодуль",					"ОбщиеМодули", 					"Общие", 		ПеречисленияТипы.ОбщийМодуль, 					3);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПараметрСеанса",				"ПараметрыСеанса", 				"Общие", 		ПеречисленияТипы.ПараметрСеанса, 				4);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Роль",							"Роли", 						"Общие", 		ПеречисленияТипы.Роль, 							5);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщийРеквизит",				"ОбщиеРеквизиты", 				"Общие", 		ПеречисленияТипы.ОбщийРеквизит, 				6);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПланОбмена",					"ПланыОбмена", 					"Общие", 		ПеречисленияТипы.ПланОбмена, 					7);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "КритерийОтбора",				"КритерииОтбора", 				"Общие", 		ПеречисленияТипы.КритерийОтбора, 				8);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПодпискаНаСобытие",			"ПодпискиНаСобытия",			"Общие",		ПеречисленияТипы.ПодпискаНаСобытия,				9);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РегламентноеЗадание",			"РегламентныеЗадания", 			"Общие", 		ПеречисленияТипы.РегламентноеЗадание, 			10);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ФункциональнаяОпция",			"ФункциональныеОпции", 			"Общие", 		ПеречисленияТипы.ФункциональнаяОпция, 			11);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПараметрФункциональнойОпции",	"ПараметрыФункциональныхОпций", "Общие", 		ПеречисленияТипы.ПараметрФункциональнойОпции, 	12);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОпределяемыйТип", 				"ОпределяемыеТипы", 			"Общие", 		ПеречисленияТипы.ОпределяемыйТип, 				56);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ХранилищеНастроек", 			"ХранилищаНастроек", 			"Общие", 		ПеречисленияТипы.ХранилищеНастроек, 			13);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщаяФорма", 					"ОбщиеФормы", 					"Общие", 		ПеречисленияТипы.ОбщаяФорма, 					14);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщаяУправляемаяФорма", 		"ОбщиеУправляемыеФормы", 		"Общие", 		ПеречисленияТипы.ОбщаяУправляемаяФорма, 		14);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщаяКоманда", 				"ОбщиеКоманды", 				"Общие", 		ПеречисленияТипы.ОбщаяКоманда, 					15);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ГруппаКоманд", 				"ГруппыКоманд", 				"Общие", 		ПеречисленияТипы.ГруппаКоманд, 					16);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Интерфейс", 					"Интерфейсы", 					"Общие", 		ПеречисленияТипы.Интерфейс, 					17);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщийМакет", 					"ОбщиеМакеты", 					"Общие", 		ПеречисленияТипы.ОбщийМакет, 					58);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ОбщаяКартинка", 				"ОбщиеКартинки", 				"Общие", 		ПеречисленияТипы.Картинка, 						19);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПакетXDTO", 					"ПакетыXDTO", 					"Общие", 		ПеречисленияТипы.ПакетXDTO, 					20);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "WebСервис", 					"WebСервисы", 					"Общие", 		ПеречисленияТипы.WebСервис, 					21);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "WSСсылка", 					"WSСсылки", 					"Общие", 		ПеречисленияТипы.WSСсылка, 						24);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ЭлементСтиля", 				"ЭлементыСтиля", 				"Общие", 		ПеречисленияТипы.ЭлементСтиля, 					26);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Стиль", 						"Стили", 						"Общие", 		ПеречисленияТипы.Стиль, 						25);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Язык", 						"Языки", 						"Общие", 		ПеречисленияТипы.Язык, 							27);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Константа", 					"Константы", 					"Конфигурация", ПеречисленияТипы.Константа, 					28);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Справочник", 					"Справочники", 					"Конфигурация", ПеречисленияТипы.Справочник, 					29);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Документ", 					"Документы", 					"Конфигурация", ПеречисленияТипы.Документ, 						30);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ЖурналДокументов", 			"ЖурналыДокументов", 			"Конфигурация", ПеречисленияТипы.ЖурналДокументов, 				33);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Перечисление", 				"Перечисления", 				"Конфигурация", ПеречисленияТипы.Перечисление, 					35);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Отчет", 						"Отчеты", 						"Конфигурация", ПеречисленияТипы.Отчет, 						37);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Обработка", 					"Обработки", 					"Конфигурация", ПеречисленияТипы.Обработка, 					38);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПланВидовХарактеристик", 		"ПланыВидовХарактеристик", 		"Конфигурация", ПеречисленияТипы.ПланВидовХарактеристик, 		39);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПланСчетов", 					"ПланыСчетов", 					"Конфигурация", ПеречисленияТипы.ПланСчетов, 					40);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПланВидовРасчета", 			"ПланыВидовРасчета", 			"Конфигурация", ПеречисленияТипы.ПланВидовРасчета, 				43);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РегистрСведений", 				"РегистрыСведений", 			"Конфигурация", ПеречисленияТипы.РегистрСведений, 				44);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РегистрНакопления", 			"РегистрыНакопления", 			"Конфигурация", ПеречисленияТипы.РегистрНакопления, 			45);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РегистрБухгалтерии", 			"РегистрыБухгалтерии", 			"Конфигурация", ПеречисленияТипы.РегистрБухгалтерии, 			46);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РегистрРасчета", 				"РегистрыРасчета", 				"Конфигурация", ПеречисленияТипы.РегистрРасчета, 				47);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "БизнесПроцесс", 				"БизнесПроцессы", 				"Конфигурация", ПеречисленияТипы.БизнесПроцесс, 				51);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Задача", 						"Задачи", 						"Конфигурация", ПеречисленияТипы.Задача, 						52);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ВнешнийИсточникДанных", 		"ВнешниеИсточникиДанных", 		"Конфигурация", ПеречисленияТипы.ПустаяСсылка(), 				54);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Реквизит", 					"Реквизиты", 					"", 			ПеречисленияТипы.Реквизит, 						56);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "СтандартнаяТабличнаяЧасть",	"СтандартныеТабличныеЧасти", 	"", 			ПеречисленияТипы.СтандартнаяТабличнаяЧасть, 	57);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "СтандартныйРеквизит",			"СтандартныеРеквизиты", 		"", 			ПеречисленияТипы.СтандартныйРеквизит, 			56);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ТабличнаяЧасть", 				"ТабличныеЧасти", 				"", 			ПеречисленияТипы.ТабличнаяЧасть, 				57);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ТабличнаяЧасть", 				"ТабличныеЧасти", 				"", 			ПеречисленияТипы.ТабличныеЧасти, 				57);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Модуль", 						"Модули", 						"", 			ПеречисленияТипы.Модуль, 						58);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Форма", 						"Формы", 						"", 			ПеречисленияТипы.Форма, 						14);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Форма", 						"Формы", 						"", 			ПеречисленияТипы.Формы, 						14);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "УправляемаяФорма", 			"УправляемыеФормы", 			"", 			ПеречисленияТипы.УправляемаяФорма, 				14);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Команда", 						"Команды", 						"", 			ПеречисленияТипы.Команда, 						15);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Макет", 						"Макеты", 						"", 			ПеречисленияТипы.Макет, 						58);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Нумератор", 					"Нумераторы", 					"", 			ПеречисленияТипы.ПустаяСсылка(), 				31);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Последовательность", 			"Последовательности",			"", 			ПеречисленияТипы.ПустаяСсылка(), 				32);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Графа", 						"Графы", 						"", 			ПеречисленияТипы.Графа, 						34);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Значение", 					"Значения", 					"", 			ПеречисленияТипы.Значение, 						36);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПризнакУчета", 				"ПризнакиУчета", 				"", 			ПеречисленияТипы.ПустаяСсылка(), 				41);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПризнакУчетаСубконто", 		"ПризнакиУчетаСубконто", 		"", 			ПеречисленияТипы.ПустаяСсылка(), 				42);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Измерение", 					"Измерения", 					"", 			ПеречисленияТипы.Измерение, 					48);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Ресурс", 						"Ресурсы", 						"", 			ПеречисленияТипы.Ресурс, 						49);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "Перерасчет", 					"Перерасчеты", 					"", 			ПеречисленияТипы.ПустаяСсылка(), 				50);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "РеквизитАдресации", 			"РеквизитыАдресации", 			"", 			ПеречисленияТипы.ПустаяСсылка(), 				53);
	ЗаполнитьСтрокуТаблицы(ТипыОбъектов.Добавить(), "ПредопределенныйЭлемент", 		"ПредопределенныеЭлементы", 	"", 			ПеречисленияТипы.ПредопределенныйЭлемент, 		56);
	
	Возврат ТипыОбъектов;
	
КонецФункции


функция ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, Значение0 = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт 
	
	Колонки = СтрокаТаблицы.Владелец().Колонки; 
	
	Для Каждого Колонка из Колонки Цикл 
		ИндексКолонки = Колонки.Индекс(Колонка);
		ЗначениеПоля = Вычислить("Значение"+ИндексКолонки);
		
		СтрокаТаблицы[Колонка.Имя] = ЗначениеПоля;
		
	КонецЦикла;	
	
	Возврат СтрокаТаблицы;
	
КонецФункции

	

Функция ПолучитьЗначенияРеквизитов(Ссылка, Знач ИменаРеквизитов) Экспорт
	
	Результат = Новый Структура(СтрЗаменить(ИменаРеквизитов, ".", ""));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	" + ИменаРеквизитов + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Результат;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
	
	Возврат Результат;
	
КонецФункции

// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Строка) Экспорт
	
	ХД = Новый ХешированиеДанных(ХешФункция.MD5);
	ХД.Добавить(Строка);
	Возврат СтрЗаменить(ХД.ХешСумма," ","");
		
КонецФункции

Функция ПоместитьТаблицуВМенеджерВТ(Таблица, ИмяТаблицы, МенеджерВТ= Неопределено) Экспорт 
	
	Если МенеджерВТ = Неопределено Тогда 
		МенеджерВТ = новый МенеджерВременныхТаблиц;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции	

Функция ПоместитьТаблицыВМенеджерВТ(СтруктураТаблиц, МенеджерВТ= Неопределено) Экспорт
	
	Если МенеджерВТ = Неопределено Тогда 
		МенеджерВТ = новый МенеджерВременныхТаблиц;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ШаблонЗапросаТаблицы = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	&%2 КАК Таблица";
	
	МассивПодзапросов = Новый Массив;
	
	
	Для Каждого ОписаниеТаблицы из СтруктураТаблиц Цикл 
		
		ИмяПараметра = "Таблица" + ОписаниеТаблицы.Ключ; 
		МассивПодзапросов.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапросаТаблицы, ОписаниеТаблицы.Ключ, ИмяПараметра));
		Запрос.УстановитьПараметр(ИмяПараметра, ОписаниеТаблицы.Значение);
		
	КонецЦикла;	
	
	Запрос.Текст = СтрСоединить(МассивПодзапросов, 
	"
	|;
	|");
	
	Запрос.Выполнить();
	Возврат Запрос.МенеджерВременныхТаблиц;

	
КонецФункции	

Функция ПолучитьТаблицуИзМенеджераВТ(МенеджерВТ, ИмяТаблицы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяТаблицы КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ПолучитьТаблицыИзМенеджераВТ(МенеджерВТ, ИменаТаблиц) Экспорт 
	
	МассивИмен = СтрРазделить(ИменаТаблиц,",");
	
	МассивПодзапросов = Новый Массив;
	Для Каждого ИмяТаблицы из МассивИмен Цикл 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ИмяТаблицы КАК Таблица";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
		
		МассивПодзапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;	
	
	Соеденитель = 
	"
	|;
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = СтрСоединить(МассивПодзапросов, Соеденитель);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Счетчик = -1;
	Для Каждого ИмяТаблицы из МассивИмен Цикл 
		Счетчик = Счетчик + 1;
		
		Результат.Вставить(ИмяТаблицы, МассивРезультатов[Счетчик].Выгрузить());
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Процедура УдалитьТаблицыИзМенеджераВТ(ИменаТаблиц, МенеджерВТ) Экспорт 
	
	МассивИменТабиц = СтрРазделить(ИменаТаблиц,",");
	
	МассивБлоков = Новый Массив;	
	
	ШаблонБлока = "УНИЧТОЖИТЬ %1";
	РазделительБлоков = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	
	Для Каждого ИмяТаблицы из МассивИменТабиц Цикл 
		
		МассивБлоков.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонБлока,ИмяТаблицы));
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = СтрСоединить(МассивБлоков, РазделительБлоков);
	Запрос.Выполнить();
	
КонецПроцедуры	

// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный. Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//   Строка - XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Возвращает значение, полученное из XML-строки. 
// Получены из XML-строки могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// СтрокаXML - строка представления значения в сериализованном виде.
//
// Возвращаемое значение:
// Значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

//	Преобразует таблицу значений в массив.
//	Может использоваться для передачи на клиента данных, полученных
//	на сервере в виде таблицы значений в том случае, если таблица
//	значений содержит только такие значения, которые могут
//  быть переданы на клиента.
//
//	Полученный массив содержит структуры, каждая из которых повторяет
//	структуру колонок таблицы значений.
//
//	Не рекомендуется использовать для преобразования таблиц значений
//	с большим количеством строк.
//
//	Параметры: 
//    ТаблицаЗначений - ТаблицаЗначений
//
//	Возвращаемое значение: 
//    Массив
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции
