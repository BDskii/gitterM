
Процедура ЛогОтладка(пТекст) Экспорт
	
	ОбщегоНазначениеСервер.ЗаписатьИнформациюВЖурнал("ЛогОтладка", пТекст, "Информация");
	
	Сообщить( "" + ТекущаяДата() + ". " + пТекст, СтатусСообщения.БезСтатуса );
	
КонецПроцедуры

Процедура ЛогИнформация( Знач пТекст ) Экспорт
	
	ОбщегоНазначениеСервер.ЗаписатьИнформациюВЖурнал("ЛогИнформация", пТекст, "Информация");
	
	Сообщить( "" + ТекущаяДата() + ". " + пТекст, СтатусСообщения.Информация );
	
КонецПроцедуры

Процедура ЛогОшибка( Знач пТекст ) Экспорт
	
	ОбщегоНазначениеСервер.ЗаписатьИнформациюВЖурнал("ЛогОшибка", пТекст, "Ошибка");
	
	
	Сообщить( "" + ТекущаяДата() + ". " + пТекст, СтатусСообщения.ОченьВажное );
	
КонецПроцедуры

Процедура ЛогКоманда( Знач пТекст ) Экспорт
	
	ОбщегоНазначениеСервер.ЗаписатьИнформациюВЖурнал("ЛогКоманда", пТекст, "Информация");

	
	Сообщить( " > " + пТекст );
	
КонецПроцедуры

Процедура ЛогВыводКоманды( Знач пТекст ) Экспорт

	ОбщегоНазначениеСервер.ЗаписатьИнформациюВЖурнал("ЛогВыводКоманды", пТекст, "Информация");
	
	Сообщить( "		>> " + пТекст );

КонецПроцедуры

Процедура ЛогВыводКомандыИзФайла( имяФайлаВывода ) Экспорт

	чтениеФайла = Новый ЧтениеТекста( имяФайлаВывода, КодировкаТекста.UTF8 );
	
	текСтрока = чтениеФайла.ПрочитатьСтроку();
	
	Пока текСтрока <> Неопределено Цикл
		
		ЛогВыводКоманды( текСтрока );
		
		текСтрока = чтениеФайла.ПрочитатьСтроку();
		
	КонецЦикла;
	
	чтениеФайла.Закрыть();

	УдалитьФайлы( имяФайлаВывода );

КонецПроцедуры



Функция ФайлСуществует( Знач пИмяФайла ) Экспорт
	
	Если Не ЗначениеЗаполнено( пИмяФайла ) Тогда
		
		Возврат Ложь;
	
	КонецЕсли;
	
	Файл = Новый Файл( пИмяФайла );
	
	Возврат Файл.Существует() И Файл.ЭтоФайл();
	
КонецФункции

Процедура ОбеспечитьТекстовыйФайл( Знач пИмяФайла ) Экспорт
	
	Если Не ЗначениеЗаполнено( пИмяФайла ) Тогда
		
		Возврат;
	
	КонецЕсли;
	
	Если Не ФайлСуществует( пИмяФайла ) Тогда
		
		записьФайла = Новый ЗаписьТекста( пИмяФайла );
		записьФайла.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбеспечитьКаталог( Знач Путь ) Экспорт
	
	Объект = Новый Файл( Путь );
	
	Если Не Объект.Существует() Тогда
		
		СоздатьКаталог( Путь );
		
	ИначеЕсли НЕ Объект.ЭтоКаталог() Тогда
		
		ВызватьИсключение "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
		
	КонецЕсли;
	
КонецПроцедуры

Функция Экранировать( Значение ) Экспорт
	
	Возврат СтрЗаменить( Значение, """", """""" );
	
КонецФункции


#Если Не ВебКлиент Тогда

Функция ВыполнитьКоманду( Знач ЛокальныйРепозиторийАдрес,
						  Знач ТекстКоманды,
						  Знач пОжидатьЗавершения = Истина,
						  Знач пПропуститьВыводЛога = Ложь ) Экспорт
	
	Если Не пПропуститьВыводЛога Тогда
		
		файлВывода = ПолучитьИмяВременногоФайла( "txt" );
		
		ЛогКоманда( ТекстКоманды );
		
		ТекстКоманды = ТекстКоманды + " > " + Экранировать( файлВывода ) + " 2>&1";
		
	КонецЕсли;
	
	командныйФайл = ПолучитьИмяВременногоФайла( "bat" );
	
	записьТекста = Новый ЗаписьТекста( командныйФайл, "cp866" );
	записьТекста.ЗаписатьСтроку( ТекстКоманды );
	записьТекста.Закрыть();
	
	КодВозврата = ВыполнитьКомандныйФайл( ЛокальныйРепозиторийАдрес, командныйФайл, пОжидатьЗавершения );
	
	Попытка
		УдалитьФайлы( командныйФайл );
	Исключение
		ЛогОшибка("Не удалось удалить коммандный файл:"""+командныйФайл+"""."+Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Если Не пПропуститьВыводЛога Тогда
		
		ЛогВыводКомандыИзФайла( файлВывода );
		
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции

Функция ВыполнитьКомандныйФайл( Знач ЛокальныйРепозиторийАдрес,
								Знач пИмяФайла,
								Знач пОжидатьЗавершения = Истина ) Экспорт
	
	КодВозврата = Неопределено;
	
	запускальщик = _ОбщегоНазначенияПовтИсп.Запускальщик(); 
	
	Если запускальщик = Неопределено Тогда
		
		ЗапуститьПриложение( пИмяФайла, ЛокальныйРепозиторийАдрес, пОжидатьЗавершения, КодВозврата );
		
	Иначе
		
		запускальщик.CurrentDirectory = ЛокальныйРепозиторийАдрес;
		
		КодВозврата = запускальщик.Run( пИмяФайла, 0, пОжидатьЗавершения);
		
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции


#КонецЕсли


// Функция - Значение в массиве
// реализация ОбщегоНазначенияУТКлиентСервер.ЗначениеВМассиве
//
// Параметры:
//  Значение - Произвольный - значение для помещения в массив 
// 
// Возвращаемое значение:
//  массив - массив со значением
//
Функция ГлЗначениеВМассиве(Значение) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	
КонецФункции	

// Функция - Получить реквизит или свойство объекта если есть
// ищет в объекте реквизита с полученным названием и возвращает его значение или ЗначениеПоУмолчанию если такого реквизита нет
// реализация ОбщегоНазначенияУТКлиентСервер.ПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть
//
// Параметры:
//  Объект				 - Произвольный	 - где искать
//  ИмяРеквизита		 - Строка - что искать 
//  ЗначениеПоУмолчанию	 - Произвольный	 - что вернуть если не нашли 
// 
// Возвращаемое значение:
//  Произвольный - значение реквизита или ЗначениеПоУмолчанию
//
Функция ГлПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(Объект, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(Объект, ИмяРеквизита, ЗначениеПоУмолчанию);
	
КонецФункции


//Богданский 27.01.2017 //Более компактный вариант описания типов с квалификатором  

Функция ГлОписаниеТипаСтрока(Длина = 0, ДопустимаяДлина = Неопределено) Экспорт 
	
	Возврат ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(Длина, ДопустимаяДлина);
	
КонецФункции	

Функция ГлОписаниеТипаДвоичныеДанные(Длина = 0, ДопустимаяДлина = Неопределено) Экспорт 
	     
	Возврат ОбщегоНазначенияКлиентСервер.ОписаниеТипаДвоичныеДанные(Длина, ДопустимаяДлина);
	
КонецФункции	

Функция ГлОписаниеТипаДата(ЧастиДаты = Неопределено) Экспорт 
	
	Возврат ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты);
	
КонецФункции	

Функция ГлОписаниеТипаЧисло(ЧислоРазрядов = 10, ЧислоРазрядовДробнойЧасти = 0, ДопустимыйЗнак = Неопределено) Экспорт 
	
	Возврат ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнак);
	
КонецФункции	

Функция ГлЗаполнитьСтрокуТаблицы(СтрокаТаблицы, Значение0 = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт 
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаполнитьСтрокуТаблицы(СтрокаТаблицы,
	Значение0, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	
КонецФункции

//Богданский 27.01.2017   



