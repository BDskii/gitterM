
Процедура ИнициироватьЛокальныйРепозиторий(ЛокальныйРепозиторийАдрес) Экспорт
	
	Если КаталогСодержитРепозиторий(ЛокальныйРепозиторийАдрес) Тогда
		
		ВызватьИсключение "Каталог уже содержит репозиторий git";
		
	КонецЕсли;
	
	ТекстКоманды = "git init";
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при создании репозитория";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
	Config(ЛокальныйРепозиторийАдрес, "core.autocrlf", "false");
	Config(ЛокальныйРепозиторийАдрес, "core.quotepath", "false");
	
КонецПроцедуры

Процедура ДобавитьУдаленныйРепозиторий(ЛокальныйРепозиторийАдрес, УдаленныйРепозиторийАдрес) Экспорт
	
	ТекстКоманды = "git remote add origin " + УдаленныйРепозиторийАдрес;
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при указании удаленного репозитория";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КаталогСодержитРепозиторий(ЛокальныйРепозиторийАдрес) Экспорт
	
	МассивФайлов = НайтиФайлы(ЛокальныйРепозиторийАдрес, ".git");
	
	Возврат МассивФайлов.Количество() > 0 И МассивФайлов[0].ЭтоКаталог();
	
КонецФункции

Процедура ОтслеживатьВсеФайлыВКаталоге(ЛокальныйРепозиторийАдрес) Экспорт
	
	ТекстКоманды = "git add -A .";
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при отслеживании файлов";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СконфигурироватьИмяПользователя(ЛокальныйРепозиторийАдрес, Имя) Экспорт
	
	Config(ЛокальныйРепозиторийАдрес, "user.name", Имя, Истина);
	
КонецПроцедуры

Процедура СконфигурироватьEmailПользователя(ЛокальныйРепозиторийАдрес, Email) Экспорт
	
	Config(ЛокальныйРепозиторийАдрес, "user.email", Email);
	
КонецПроцедуры

Процедура ВыполнитьКоммит(Знач ЛокальныйРепозиторийАдрес,
										  Знач Комментарий,
										  Знач пДата,
										  Знач Хранилище) Экспорт
	
	ДатаСтрокой = Формат(пДата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс");
	
	Если ПустаяСтрока(Комментарий) Тогда
		
		Комментарий = "Комментарий не указан";
		
	КонецЕсли;
	
	ИмяФайлаКомментария = ПолучитьИмяВременногоФайла("txt");
	
	ФайлКомментария = Новый ЗаписьТекста(ИмяФайлаКомментария);
	ФайлКомментария.Записать(Комментарий);
	ФайлКомментария.Закрыть();
	
	вывод_Коммит = ПолучитьИмяВременногоФайла("txt");
	
	КомандныйФайл_Коммит = ПолучитьИмяВременногоФайла("bat");
	
	записьТекста = Новый ЗаписьТекста(КомандныйФайл_Коммит, "cp866");
	записьТекста.ЗаписатьСтроку("chcp 866 >nul");
	записьТекста.ЗаписатьСтроку("set GIT_COMMITTER_DATE=" + ДатаСтрокой);
	записьТекста.ЗаписатьСтроку("set GIT_AUTHOR_DATE=" + ДатаСтрокой);
	записьТекста.ЗаписатьСтроку("git commit -a --file=" + Экранировать(ИмяФайлаКомментария) + " --date " + ДатаСтрокой + " > " + Экранировать(вывод_Коммит));
	записьТекста.Закрыть();
	
	
	ЛогВыводКоманды("git commit -a --file=" + Экранировать(ИмяФайлаКомментария) + " --date " + ДатаСтрокой);
	
	КодВозврата = ВыполнитьКомандныйФайл(ЛокальныйРепозиторийАдрес, КомандныйФайл_Коммит);
	
	ЛогВыводКомандыИзФайла(вывод_Коммит);
	
	Если КодВозврата <> 0 Тогда
		
		// Может быть ситуация, когда помещение в хранилище было, но даже сама 1С не видит изменений при выгрузке в файл.
		//|TODO а ещё есть изменения на обычных формаю без изменения кода которые тоже не комитятся
		
		Если Не ПакетныйРежим.ПроверитьФайлИзменений_ЕстьИзменения(Хранилище) Тогда
			
			Сообщить("!!! Изменений нет. Коммит не выполнен");
			
		Иначе
			
			ОписаниеОшибки = "Неизвестная ошибка при коммите. Код возврата: " + КодВозврата;
			ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, КомандныйФайл_Коммит);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьФайлПоВозможности(КомандныйФайл_Коммит);
	УдалитьФайлПоВозможности(ИмяФайлаКомментария);
	
КонецПроцедуры

Процедура СохранитьСписокИзменений(Знач ЛокальныйРепозиторийАдрес, Знач Хранилище, Знач Версия) Экспорт
	
	Config(ЛокальныйРепозиторийАдрес, "core.autocrlf", "false");
	Config(ЛокальныйРепозиторийАдрес, "core.quotepath", "false");
	
	
	ИмяФайлаИзменений = ПолучитьИмяВременногоФайла("txt");
	
	ТекстКоманды = "git diff --name-status --no-renames HEAD > "+ИмяФайлаИзменений; 
	
	ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды, Истина, Истина);
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайлаИзменений, КодировкаТекста.UTF8);
	Текст = ТД.ПолучитьТекст();
	
	УдалитьФайлПоВозможности(ИмяФайлаИзменений);
	
	КаталогКонфигурации = Справочники.Хранилища.ПолучитьКаталогКонфигурации(Хранилище);
	
	ИмяКаталога = СтрЗаменить(КаталогКонфигурации, ЛокальныйРепозиторийАдрес, "");
	
	
	РедактируемыйОбъект = Версия.ПолучитьОбъект();
	РедактируемыйОбъект.ИзмененныеФайлы.Очистить();
	
	Для НомерСтроки = 0 по СтрЧислоСтрок(Текст) Цикл 
		ТекСтрока = СтрПолучитьСтроку(Текст, НомерСтроки);
		//Ожидаем что-то типа "A       srv/Configuration.xml"
		
		Если СтрНачинаетсяС(ТекСтрока, "D") Тогда 
			ТипИзменения = Перечисления.ТипыИзменений.Удаление;
			
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "A") Тогда
			ТипИзменения = Перечисления.ТипыИзменений.Добавление;
			
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "M") Тогда
			ТипИзменения = Перечисления.ТипыИзменений.Изменение;
			
		Иначе 
			ТипИзменения = Перечисления.ТипыИзменений.ПустаяСсылка();
			
		КонецЕсли;	
		
		СтрокаПутиФайла = СокрЛП(Сред(ТекСтрока,2));
		СтрокаПутиФайла = СтрЗаменить(СтрокаПутиФайла, """", "");
		
		Если СтрНачинаетсяС(СтрокаПутиФайла, ИмяКаталога)Тогда
			
			НоваяСтрока = РедактируемыйОбъект.ИзмененныеФайлы.Добавить();
			НоваяСтрока.Файл = СтрокаПутиФайла;
			НоваяСтрока.ТипИзменения = ТипИзменения;
						
		КонецЕсли;
		
		
	КонецЦикла;
	РедактируемыйОбъект.Записать();
	
КонецПроцедуры

Процедура Commit(ЛокальныйРепозиторийАдрес, Знач Комментарий, Дата, Хранилище) Экспорт
	
	Если ПустаяСтрока(Комментарий) Тогда
		
		Комментарий = "Комментарий не указан";
		
	КонецЕсли;
	
	ДатаСтрокой = Формат(Дата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс");
	
	ТекстКоманды = "git commit -m " + Экранировать(Комментарий) + " --date " + ДатаСтрокой;
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		// Может быть ситуация, когда помещение в хранилище было, но даже сама 1С не видит изменений при выгрузке в файл.
		
		Если Не ПакетныйРежим.ПроверитьФайлИзменений_ЕстьИзменения(Хранилище) Тогда
			
			Сообщить("!!! Изменений нет. Коммит не выполнен");
			
		Иначе
			
			ОписаниеОшибки = "Неизвестная ошибка при совершении комита. Код возврата: " + КодВозврата;
			ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Push(ЛокальныйРепозиторийАдрес) Экспорт
	
	ТекстКоманды = "git push origin master";
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при отправлении изменений в удаленный репозиторий";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Pull(ЛокальныйРепозиторийАдрес) Экспорт
	
	ТекстКоманды = "git pull -v origin master";
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при получении изменений из удаленного репозитория";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Обслужить(ЛокальныйРепозиторийАдрес) Экспорт
	
	ТекстКоманды = "git gc --auto";
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при обслуживании репозитория";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Config(ЛокальныйРепозиторийАдрес, Параметр, Знач Значение, ЭкранироватьЗначение = Ложь)
	
	Если ЭкранироватьЗначение Тогда
		
		Значение = Экранировать(Значение);
		
	КонецЕсли;
	
	ТекстКоманды = "git config " + Параметр + " " + Значение;
	
	КодВозврата = ВыполнитьКоманду(ЛокальныйРепозиторийАдрес, ТекстКоманды);
	
	Если КодВозврата <> 0 Тогда
		
		ОписаниеОшибки = "Неизвестная ошибка при конфигурировании";
		ВызватьИсключение ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ИсключениеОшибкаПриВыполненииКоманды(ОписаниеОшибки, ТекстКоманды)
	
	Возврат ОписаниеОшибки + "(" + ТекстКоманды + ")";
	
КонецФункции


